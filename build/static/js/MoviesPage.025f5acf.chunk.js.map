{"version":3,"sources":["services/themoviedb-api.js","pages/MoviesPage/MoviesPage.jsx"],"names":["BASE_URL","API_KEY","IMG_URL","size","fetchWithErrorHandling","url","fetch","then","response","ok","json","Promise","reject","Error","fetchTrending","fetchMovies","query","page","fetchFilmDetails","movieId","fetchCredits","fetchReviews","SearhView","useState","setQuery","films","setFilms","location","useLocation","useSearchParams","setSearchParams","memorySearch","URLSearchParams","search","get","onSubmit","filmAPI","results","useEffect","event","preventDefault","trim","alert","type","autoComplete","autoFocus","value","placeholder","onChange","currentTarget","toLowerCase","map","id","title","to"],"mappings":"yIAAA,gNAAMA,EAAW,+BACXC,EAAU,mCACHC,EAAU,SAAAC,GAAI,2CACKA,IAEhC,SAASC,IAAkC,IAAXC,EAAU,uDAAJ,GACpC,OAAOC,MAAMD,GAAKE,MAAK,SAAAC,GAAQ,OAC7BA,EAASC,GACLD,EAASE,OACTC,QAAQC,OAAO,IAAIC,MAAM,iBAI1B,SAASC,IACd,OAAOV,EAAuB,GAAD,OACxBJ,EADwB,uCACeC,IAIvC,SAASc,IAAmC,IAAvBC,EAAsB,uDAAd,GAAIC,EAAU,uDAAH,EAC7C,OAAOb,EAAuB,GAAD,OACxBJ,EADwB,iCACSC,EADT,kBAC0Be,EAD1B,iBACwCC,IAIhE,SAASC,IAAkC,IAAjBC,EAAgB,uDAAN,KACzC,OAAOf,EAAuB,GAAD,OACxBJ,EADwB,kBACNmB,EADM,oBACalB,IAIrC,SAASmB,IAA8B,IAAjBD,EAAgB,uDAAN,KACrC,OAAOf,EAAuB,GAAD,OACxBJ,EADwB,kBACNmB,EADM,4BACqBlB,IAI7C,SAASoB,IAAwC,IAA3BF,EAA0B,uDAAhB,KAAMF,EAAU,uDAAH,EAClD,OAAOb,EAAuB,GAAD,OACxBJ,EADwB,kBACNmB,EADM,4BACqBlB,EADrB,iBACqCgB,M,8HCnCrD,SAASK,IAAa,IAAD,EAClC,EAA0BC,mBAAS,IAAnC,mBAAOP,EAAP,KAAcQ,EAAd,KACA,EAA0BD,mBAAS,MAAnC,mBAAOE,EAAP,KAAcC,EAAd,KACMC,EAAWC,cACjB,EAAsCC,cAAtC,mBAAmBC,GAAnB,WAEMC,EAAY,UAAG,IAAIC,gBAAgBL,EAASM,QAAQC,IAAI,gBAA5C,QAAwD,GAMpEC,EAAW,SAAAnB,GACfoB,IAAoBpB,GAAOT,MAAK,SAAAC,GAAQ,OAAIkB,EAASlB,EAAS6B,aAoBhE,OAPAC,qBAAU,WACgB,KAApBX,EAASM,QAGbE,EAASJ,KACR,IAGD,qCACE,uBAAMI,SAnBW,SAAAI,GAEnB,GADAA,EAAMC,iBACe,KAAjBxB,EAAMyB,OACR,OAAOC,MAAM,6BAEfP,EAASnB,GACTc,EAAgB,CAAEd,MAAOA,IACzBQ,EAAS,KAYP,UACE,uBACEmB,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,MAAO9B,EACP+B,YAAY,cACZC,SAlCiB,SAAAT,GACvBf,EAASe,EAAMU,cAAcH,MAAMI,kBAmC/B,wBAAQP,KAAK,SAAb,uBAEDlB,GACC,6BACGA,EAAM0B,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACT,6BACE,cAAC,IAAD,CAAMC,GAAE,UAAKF,GAAb,SAAoBC,KADbD","file":"static/js/MoviesPage.025f5acf.chunk.js","sourcesContent":["const BASE_URL = 'https://api.themoviedb.org/3';\r\nconst API_KEY = '6979cd1cbea8e51a3659aff13232cb9d';\r\nexport const IMG_URL = size =>\r\n  `https://image.tmdb.org/t/p/${size}`;\r\n\r\nfunction fetchWithErrorHandling(url = '') {\r\n  return fetch(url).then(response =>\r\n    response.ok\r\n      ? response.json()\r\n      : Promise.reject(new Error('Not found')),\r\n  );\r\n}\r\n\r\nexport function fetchTrending() {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`,\r\n  );\r\n}\r\n\r\nexport function fetchMovies(query = '', page = 1) {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}&page=${page}`,\r\n  );\r\n}\r\n\r\nexport function fetchFilmDetails(movieId = null) {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`,\r\n  );\r\n}\r\n\r\nexport function fetchCredits(movieId = null) {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`,\r\n  );\r\n}\r\n\r\nexport function fetchReviews(movieId = null, page = 1) {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&page=${page}`,\r\n  );\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\r\nimport * as filmAPI from '../../services/themoviedb-api';\r\n\r\nexport default function SearhView() {\r\n  const [query, setQuery] = useState('');\r\n  const [films, setFilms] = useState(null);\r\n  const location = useLocation();\r\n  let [searchParams, setSearchParams] = useSearchParams();\r\n\r\n  const memorySearch = new URLSearchParams(location.search).get('query') ?? '';\r\n\r\n  const handleNameChange = event => {\r\n    setQuery(event.currentTarget.value.toLowerCase());\r\n  };\r\n\r\n  const onSubmit = query => {\r\n    filmAPI.fetchMovies(query).then(response => setFilms(response.results));\r\n  };\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    if (query.trim() === '') {\r\n      return alert('What are you looking for?');\r\n    }\r\n    onSubmit(query);\r\n    setSearchParams({ query: query });\r\n    setQuery('');\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (location.search === '') {\r\n      return;\r\n    }\r\n    onSubmit(memorySearch);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n          autoFocus\r\n          value={query}\r\n          placeholder=\"Search film\"\r\n          onChange={handleNameChange}\r\n        />\r\n        <button type=\"submit\">Search</button>\r\n      </form>\r\n      {films && (\r\n        <ul>\r\n          {films.map(({ id, title }) => (\r\n            <li key={id}>\r\n              <Link to={`${id}`}>{title}</Link>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n"],"sourceRoot":""}